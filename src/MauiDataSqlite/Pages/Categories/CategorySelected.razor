@page "/Categories/CategorySelected/{Id}"
@inject IWorkService _workService;
@inject ICategoryService _categoryService;
@inject NavigationManager _navigate;
<div style="display:flex;flex-direction:column">
    <div style="flex:1;display:flex; flex-direction:row">
        <h1 style="flex:1">@_category.Name</h1>
        <button style="flex:1" class="btn btn-secondary" @onclick="NavigateToCreateWork">Create Work</button>
    </div>

    <table style="width:100%;flex:5" class="table table-striped table-hover">
        <thead>
            <tr>
                <th colspan="3">
                    Tasks
                </th>

            </tr>
        </thead>
        <tbody>
            @if (_works.Any())
                foreach (var work in _works)
                {
                    <tr>
                        <td><input type="checkbox" value="@work.IsCompleted" /></td>
                        <td>@work.Name</td>
                        <td>@work.StartDate.ToShortDateString()</td>
                    </tr>
                }
            else
            {
                <tr>
                    <td colspan="3">Nothing works to see..</td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
    [Parameter]
    public string Id { get; set; }
    private IEnumerable<Work> _works = new List<Work>();
    private Category _category = new();
    protected override async Task OnInitializedAsync()
    {
        _category = await _categoryService.GetCategoryByIdAsync(Guid.Parse(Id), default);
        _works = await _workService.GetAllWorkByCategoryIdAsyc(_category.Id, default);
    }

    private void NavigateToCreateWork()
    {
        _navigate.NavigateTo($"/CreateWork/{_category.Id}");
    }

}

