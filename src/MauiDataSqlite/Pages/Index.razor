@page "/"

@inject IWorkService _workService;
@inject ICategoryService _categoryService;
@inject NavigationManager _navigate;
<div style="display:flex; flex-direction:column">
    <div style="display:flex;flex-direction:row; flex:1">
        <h1 style="flex:1">Today!</h1>
        <button style="flex:1" class="btn btn-primary" @onclick="NavigateToCreateWork">Create Work ToDay</button>
    </div>
    <table style="width:100%; flex:5" class="table table-striped table-hover">
        <thead>
            <tr>
                <th colspan="3">
                    Tasks
                </th>

            </tr>
        </thead>
        <tbody>
            @if (_works.Any())
                foreach (var work in _works)
                {
                    <tr>
                        <td>@work.IsCompleted</td>
                        <td>@work.Name</td>
                        <td>@work.StartDate.ToShortDateString()</td>
                    </tr>
                }
            else
            {
                <tr>
                    <td colspan="3">Nothing works to see..</td>
                </tr>
            }
        </tbody>
    </table>
   
</div>


@code {
    private IEnumerable<Work> _works = new List<Work>();
    private const string MyTodo = "MyToday";
    private Category Category = new();
    protected override async Task OnInitializedAsync()
    {
        Category = await _categoryService.GetCategoryByNameAsync(MyTodo, default);
        _works = await _workService.GetAllWorkByCategoryIdAsyc(Category.Id, default);
    }

    private void NavigateToCreateWork()
    {
        _navigate.NavigateTo($"/CreateWork/{Category.Id}");
    }
}
