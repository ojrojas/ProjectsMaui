@page "/"
@inject ITaskService _taskService;
@inject IGroupService _groupService;
@inject NavigationManager _navigation;
<div style="display:flex">
    <h1 style="flex:3">@NameGroup</h1>
    <button style="flex:1" class="btn btn-primary" @onclick="NavigateToCreateTask" >Create Task</button>
</div>
<table class="table table-striped table-hover table-sm">
    <thead>
        <tr style="display:flex">
            <th style="flex:1">
                Select
            </th>
            <th style="flex:4">
                Name
            </th>
        </tr>
    </thead>
    <tbody>
        @if (_tasks.Any())
        {
            foreach (var task in _tasks)
            {
                <tr style="display:flex">
                    <td style="flex:1">@task.Id.ToString().Substring(0, 6)</td>
                    <td style="flex:4">@task.Name</td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    [Parameter]
    public string IdGroup { get; set; }
    private string NameGroup = string.Empty;
    private IEnumerable<MauiDataStoreSqlite.Core.Entities.Task> _tasks = new List<MauiDataStoreSqlite.Core.Entities.Task>();
    protected override async Task OnInitializedAsync()
    {
        await LoadDataTasksAndGroupsAsync();
    }

    private async Task LoadDataTasksAndGroupsAsync()
    {
        if (string.IsNullOrEmpty(IdGroup)) await FoundGroupAllTodo();
        _tasks = await _taskService.GetAllTaskByGroupIdAsync(IdGroup, default);
        var group = await _groupService.GetByIdGroupAsync(IdGroup, default);
        if (group is not null) NameGroup = group.Name;
        else NameGroup = "Do not found AllTodo created";
    }

    private async Task FoundGroupAllTodo()
    {
        var groups  =await _groupService.GetAllGroupsAsync(default);
        IdGroup =  groups.FirstOrDefault().Id.ToString();
    }

    private void NavigateToCreateTask()
{
        _navigation.NavigateTo("/Tasks/Create");
}
}